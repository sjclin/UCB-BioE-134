package org.ucb.c5.composition.checkers;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class RNAInterferenceCheckerTest {

    @Test
    /** Test whether RNAInterferenceChecker can correctly detect RNA interference CDS in the composition
     * 
     * @author Kevin Hong
     */
    public void testRNAInterferenceChecker() throws Exception {

        RNAInterferenceChecker RIC = new RNAInterferenceChecker();
        RIC.initiate();

        //Create goodlist with random sequences examples, and badlist with sequences that interfere
        List<String> goodlist = new ArrayList<>();
        List<String> badlist = new ArrayList<>();

        //Populate goodlist
        goodlist.add("CAGTTTGCTGGTTCAGGTAAAGGTTCCTCACGCTACCTCAAAGCAGGAGGAGTCGTGACATTATCCGTGATTTTCTCACTACTATTAGTACTCACGAC");
//        goodlist.add("TCGATTCTGCCTGCCAGTCAGCATTAAGGAGAGCTCAGGGCAGGTCACGAACCTCAGTTAACTCGCATAGTGAGGGTTACATGTTCGTTGGGC");
        goodlist.add("TCTTCCGACAGCCTACATCCTACCAGAGGTCTGTGCCCCGGTGGTGAGAAGTGCGGATTTCGTATTTGCAGCTCGTCAGTACTTTCA");
//        goodlist.add("GAATCATGGCCTGCACGGCAATATAATGGACTTCGACATGGCAATAACGCCTCGTTTCTACGTAATAGTATAAACATAAGCAGCCATGCTG");
        goodlist.add("CGTAATGCCTGGGTCGATCGATTTCTAGCATCAGC");

        //Populate badlist
        badlist.add("TACCAGCTCATAGAGGTCATTCACATCCTGACCATTCAGTTGAGCAAAATAGTTCTTCAGTGCCTGTTTAACCGAGTCACGC");
        badlist.add("GGAAATCGTCGAGGGATTTACCTTGCTCATCCATTGCTTTTTTGATTACAGCTGGAGTACGGCCTTGGCCAGTCCAGGTTTTAGTTTCGCCGTTTTCGTCAACGTAGCTATATTTTGCCGGACGCTGAGCACGTTTAGCTTTGGTGCCAGATTTAACGGCAGCAAGGCTATTCAGCAGTTCGTTCGGGTCAATACCGTCAGCGATCAGCATTTCGCGATATTGCTGCAGTTTACGAGTGCGCTCTTCAACTTCAGCAGCAGC");
        badlist.add("TGTCTGCGATAGCGTTAGCCACGATTTCAGTACCTTTGCGGAAGTTCGGGAATTCGAACACGCCAACCGGACCGTTCCACAGAATGGTTTTCGCATTCTTCAGGATTTCAGCCAGTTCCTGAGCGGAAGCATCACCGATATCCAGGATCTGCTCGTCAGCTTTCACATCGTTAACAGATTTCAGGGTAGCCGGTGCAGTTTCAGAGAACTCGGTTGCTACGCGAACATCAGACGGAACCGGGATGTTGCAGGTGGTCAGCAGCGAAGTTACCATCACT");
        badlist.add("GCCAAAGCGGTAGTGACGCGCATCTGCCCAGTCAGCACCGAACAGTTCATCTGCAATGGCGAGATATTTCTGCGCATCTTCCGCAGTACGCACGCCGCCCGCCGGTTTGAAACCAACGGTTTTTTCTACGCCCATATCACGGATCACTTCCATCATGATGCGCGCGCTTTCCGGCGTCGCGTTCACAGCCACTTTACCGGTAGAGGTTTTGATGAAGTCCGCACCCGCTTTGATGGAGATTTCAGACGCTTTACGGATCGTCGTTACCGTGTGGGAA");
        badlist.add("TGGTTACCGTAGCGATACGGATTTCCGGGGTGCCCTGCTCTTTCAGAGTTTTGCGAGCAATCGGGATAAAGCGAGGATAGATACAGATAGCGGCGGTATTGCCGACCGGAGTTTTGGCCTGATGACACAGGGCGATCACTTTCTCGTCGGTGTCGTCGTCATTCAGGGTGGTCAGGTCCATCAATTTCAGTGCACGCAGGCTGCTTGCTTTCAGATCAGTCATTTCAATCACAATTAAG");

        //Test and output boolean result
        for(String constructseq : goodlist) {
            boolean result = RIC.run(constructseq);
            System.out.println("result:" + result + " for " + constructseq);
            assert(result == true);
        }

        for(String constructseq : badlist) {
            boolean result = RIC.run(constructseq);
            System.out.println("result:" + result + " for " + constructseq);
            assert(result == false);
        }
    }

}